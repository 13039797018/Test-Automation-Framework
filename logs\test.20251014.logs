ERROR - 2025-10-14 17:15:28,160 - removefile.py:28 -[removefile:remove_file] - [Errno 2] No such file or directory: './report/temp\\0043f2f3-596c-4038-8b40-70bf37745abc-container.json'
INFO - 2025-10-14 17:15:28,167 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-10-14 17:15:28,167 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-10-14 17:15:28,168 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:15:28,168 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-10-14 17:15:28,168 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:28,168 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,168 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-10-14 17:15:28,191 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc2MDQzMzMyOCwianRpIjoiMjhjOWJkMGItNjZjYy00NmM0LWFlMTYtMmVhNTE1OTY5MjZlIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc2MDQzMzMyOCwiY3NyZiI6ImI3MDcwMWZlLWQ2MmYtNGY5Mi05NjZhLTIxMDVlNjhlNzg3OSIsImV4cCI6MTc2MDQzNDIyOH0.kuxOWQZRRM4gnSkVgwIu91Z_Jf6bPbmgX4me8TMPT9w', 'csrf_access_token': 'b70701fe-d62f-4f92-966a-2105e68e7879'}}
INFO - 2025-10-14 17:15:28,191 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "6140913758128971280",
  "token": "9a5B85ea4E6aaa0cbf09BcFE3C91f",
  "userId": "6334544984233740079"
}

INFO - 2025-10-14 17:15:28,192 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-10-14 17:15:28,193 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-10-14 17:15:28,193 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-10-14 17:15:28,194 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-10-14 17:15:28,194 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:28,194 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:28,203 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-10-14 17:15:28,204 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-10-14 17:15:28,204 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-10-14 17:15:28,204 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-10-14 17:15:28,204 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '9a5B85ea4E6aaa0cbf09BcFE3C91f'}
INFO - 2025-10-14 17:15:28,204 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,204 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-10-14 17:15:28,206 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-10-14 16:49:01",
  "secache_time": 1760431741000,
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:15:28,207 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-10-14 17:15:28,208 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-10-14 17:15:28,208 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-10-14 17:15:28,208 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:28,209 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:28,210 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:28,218 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-10-14 17:15:28,219 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-10-14 17:15:28,219 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:15:28,219 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-10-14 17:15:28,219 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:15:28,219 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,219 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-10-14 17:15:28,224 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "18382788819",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-10-14 17:15:28",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:15:28,225 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-10-14 17:15:28,225 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-10-14 17:15:28,225 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:28,226 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:28,227 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:28,238 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-10-14 17:15:28,239 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-10-14 17:15:28,239 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:15:28,239 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-10-14 17:15:28,239 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:15:28,239 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,240 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-10-14 17:15:28,244 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-10-14 17:15:28",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "716440879568364286328",
  "translate_language": "zh-CN",
  "userId": "6334544984233740079"
}

INFO - 2025-10-14 17:15:28,244 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '716440879568364286328'}
INFO - 2025-10-14 17:15:28,245 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '6334544984233740079'}
INFO - 2025-10-14 17:15:28,247 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-10-14 17:15:28,247 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-10-14 17:15:28,247 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:28,247 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:28,249 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:28,264 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-10-14 17:15:28,264 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-10-14 17:15:28,264 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:15:28,264 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-10-14 17:15:28,264 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:15:28,264 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,265 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '716440879568364286328', 'userId': '6334544984233740079', 'timeStamp': '1760433328'}}
INFO - 2025-10-14 17:15:28,268 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-10-14 17:15:28",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:15:28,268 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-10-14 17:15:28,268 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-10-14 17:15:28,268 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:28,269 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:28,270 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:28,281 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-10-14 17:15:28,281 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-10-14 17:15:28,281 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:15:28,281 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-10-14 17:15:28,281 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:15:28,281 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,281 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '716440879568364286328', 'timeStamp': '1760433328'}}
INFO - 2025-10-14 17:15:28,285 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-10-14 17:15:28",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:15:28,285 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-10-14 17:15:28,286 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-10-14 17:15:28,286 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:28,286 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:28,288 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-10-14 17:15:28,296 - readyaml.py:112 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-10-14 17:15:28,298 - readyaml.py:112 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-10-14 17:15:28,299 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-10-14 17:15:28,299 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-10-14 17:15:28,299 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-10-14 17:15:28,299 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-10-14 17:15:28,299 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-10-14 17:15:28,299 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,299 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-10-14 17:15:28,301 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-10-14 16:49:01",
  "secache_time": 1760431741000,
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:15:28,302 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-10-14 17:15:28,303 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-10-14 17:15:28,303 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-10-14 17:15:28,303 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:28,304 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:28,306 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:28,315 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-10-14 17:15:28,315 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-10-14 17:15:28,316 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:15:28,316 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-10-14 17:15:28,316 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:15:28,316 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,316 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-10-14 17:15:28,319 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-10-14 17:15:28",
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:15:28,320 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-10-14 17:15:28,320 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-10-14 17:15:28,320 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:28,321 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:28,322 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:28,330 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-10-14 17:15:28,330 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-10-14 17:15:28,330 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:15:28,331 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-10-14 17:15:28,331 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:15:28,331 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,331 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '56996760797', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-10-14 17:15:28,334 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-10-14 17:15:28",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "077156578859710600714",
  "translate_language": "zh-CN",
  "userId": "6334544984233740079"
}

INFO - 2025-10-14 17:15:28,335 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-10-14 17:15:28,336 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-10-14 17:15:28,338 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-10-14 17:15:28,338 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-10-14 17:15:28,338 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-10-14 17:15:28,338 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:28,339 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:28,340 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:28,358 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-10-14 17:15:28,358 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-10-14 17:15:28,358 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:15:28,358 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-10-14 17:15:28,358 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:15:28,358 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,359 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '077156578859710600714', 'userId': '6334544984233740079', 'timeStamp': '1760433328'}}
INFO - 2025-10-14 17:15:28,362 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-10-14 17:15:28",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:15:28,362 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-10-14 17:15:28,362 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-10-14 17:15:28,362 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-10-14 17:15:28,362 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:28,363 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:28,365 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:28,375 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-10-14 17:15:28,375 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-10-14 17:15:28,375 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:15:28,376 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-10-14 17:15:28,376 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:28,376 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:28,376 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': '9a5B85ea4E6aaa0cbf09BcFE3C91f'}}
INFO - 2025-10-14 17:15:28,396 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：<!doctype html>
<html lang=en>
  <head>
    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "vnFvw9AXZu5Jv6zzFiV6";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>FileNotFoundError</h1>
<div class="detail">
  <p class="errormsg">FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-134261436588864">
  <h4>File <cite class="filename">"/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-134261436594784">
  <h4>File <cite class="filename">"/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-134261436587744">
  <h4>File <cite class="filename">"/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-134261436590944">
  <h4>File <cite class="filename">"/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-134261436582624">
  <h4>File <cite class="filename">"/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-134261436586304">
  <h4>File <cite class="filename">"/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-134261436581344">
  <h4>File <cite class="filename">"/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/base/flask_service.py"</cite>,
      line <em class="line">188</em>,
      in <code class="function">add_user</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>role_id = flask.request.form.get(&#39;role_id&#39;)</pre>
<pre class="line before"><span class="ws">    </span>dates = flask.request.form.get(&#39;dates&#39;)</pre>
<pre class="line before"><span class="ws">    </span>phone = flask.request.form.get(&#39;phone&#39;)</pre>
<pre class="line before"><span class="ws">    </span>token = flask.request.form.get(&#39;token&#39;)</pre>
<pre class="line before"><span class="ws">    </span>if all([username, password, role_id, dates, phone]) and token == get_token[&#39;token&#39;]:</pre>
<pre class="line current"><span class="ws">        </span>with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
<span class="ws">        </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>add_user_info = {</pre>
<pre class="line after"><span class="ws">                </span>&#39;id&#39;: &#39;&#39;.join([random.choice(string.digits) for i in range(11)]),</pre>
<pre class="line after"><span class="ws">                </span>&#39;username&#39;: username,</pre>
<pre class="line after"><span class="ws">                </span>&#39;password&#39;: password,</pre>
<pre class="line after"><span class="ws">                </span>&#39;role_id&#39;: role_id,</pre></div>
</div>
</ul>
  <blockquote>FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File &#34;/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/base/flask_service.py&#34;, line 188, in add_user
    with open(&#39;../data/mockdata/userManage.json&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:
         ~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: &#39;../data/mockdata/userManage.json&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/.venv/lib/python3.13/site-packages/flask/app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^
  File "/mnt/e/delivery/Test-Automation-Framework-main/mock_server/api_server/base/flask_service.py", line 188, in add_user
    with open('../data/mockdata/userManage.json', 'a', encoding='utf-8') as f:
         ~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'


-->

INFO - 2025-10-14 17:15:30,554 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:30,555 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:30,560 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-10-14 17:15:30,560 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-10-14 17:15:30,560 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:15:30,560 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-10-14 17:15:30,560 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:30,560 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:30,561 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-10-14 17:15:30,562 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-10-14 17:15:30,563 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-10-14 17:15:30,563 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-10-14 17:15:30,563 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:30,563 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:30,565 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:30,569 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-10-14 17:15:30,569 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-10-14 17:15:30,570 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:15:30,570 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-10-14 17:15:30,570 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:30,570 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:30,570 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-10-14 17:15:30,572 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-10-14 17:15:30,572 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-10-14 17:15:30,572 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-10-14 17:15:30,572 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:30,573 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:30,574 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:30,579 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-10-14 17:15:30,579 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-10-14 17:15:30,579 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:15:30,579 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-10-14 17:15:30,579 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:30,579 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:30,580 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-10-14 17:15:30,581 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-10-14 17:15:30,582 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-10-14 17:15:30,582 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-10-14 17:15:30,582 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:30,582 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:30,584 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:30,589 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-10-14 17:15:30,589 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-10-14 17:15:30,589 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:15:30,590 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-10-14 17:15:30,590 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:30,590 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:30,590 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-10-14 17:15:30,592 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-10-14 17:15:30,592 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-10-14 17:15:30,592 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-10-14 17:15:30,593 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:30,593 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:30,608 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:30,615 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-10-14 17:15:30,615 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-10-14 17:15:30,615 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:15:30,615 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-10-14 17:15:30,616 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:30,616 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:30,616 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-10-14 17:15:30,618 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-10-14 17:15:30,618 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-10-14 17:15:30,618 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-10-14 17:15:30,618 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:30,618 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:30,620 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:30,624 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-10-14 17:15:30,624 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-10-14 17:15:30,625 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:15:30,625 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-10-14 17:15:30,625 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:30,625 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:30,625 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-10-14 17:15:30,627 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-10-14 17:15:30,627 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-10-14 17:15:30,627 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-10-14 17:15:30,627 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:30,628 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:30,629 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:30,634 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-10-14 17:15:30,634 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-10-14 17:15:30,634 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:15:30,634 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-10-14 17:15:30,635 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:30,635 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:30,635 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-10-14 17:15:30,637 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-10-14 17:15:30,637 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-10-14 17:15:30,637 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-10-14 17:15:30,637 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:30,638 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:30,639 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:30,644 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-10-14 17:15:30,644 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-10-14 17:15:30,644 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:15:30,644 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-10-14 17:15:30,645 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:30,645 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:30,646 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-10-14 17:15:30,646 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-10-14 17:15:30,647 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-10-14 17:15:30,647 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:30,647 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:15:30,648 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:15:30,653 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-10-14 17:15:30,653 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-10-14 17:15:30,653 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:15:30,653 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-10-14 17:15:30,653 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:15:30,653 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:15:30,654 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-10-14 17:15:30,655 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-10-14 17:15:30,656 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-10-14 17:15:30,656 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-10-14 17:15:30,656 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-10-14 17:15:30,656 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:15:30,657 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
ERROR - 2025-10-14 17:23:04,719 - removefile.py:28 -[removefile:remove_file] - [Errno 2] No such file or directory: './report/temp\\0043f2f3-596c-4038-8b40-70bf37745abc-container.json'
INFO - 2025-10-14 17:23:04,726 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户登录
INFO - 2025-10-14 17:23:04,726 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/login
INFO - 2025-10-14 17:23:04,726 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:23:04,726 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：用户名和密码正确登录验证
INFO - 2025-10-14 17:23:04,726 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,726 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,727 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_name': 'test01', 'passwd': 'admin123'}}
INFO - 2025-10-14 17:23:04,738 - sendrequest.py:107 -[sendrequest:send_request] - cookie：{'Cookie': {'access_token_cookie': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTc2MDQzMzc4NCwianRpIjoiOTlkNTM3MjUtMTI4MS00OTc4LWJhNDYtMWQzYzQxZTNmNzQxIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImV4YW1wbGVfdXNlciIsIm5iZiI6MTc2MDQzMzc4NCwiY3NyZiI6IjY5Nzk5NjYxLTE3MDAtNGI5MS1iNmM0LWEzZGZmOTkyNzAyMiIsImV4cCI6MTc2MDQzNDY4NH0.-zORuPTTPsGrOFjLX7QiyOAIVjUaxATEq0Zy0rxIoA4', 'csrf_access_token': '69799661-1700-4b91-b6c4-a3dff9927022'}}
INFO - 2025-10-14 17:23:04,738 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u767b\u5f55\u6210\u529f",
  "msg_code": 200,
  "orgId": "4140913758110176843",
  "token": "DC7aeac9acAc54c9Ec0BEa24aF4a6",
  "userId": "2696980775605809234"
}

INFO - 2025-10-14 17:23:04,739 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-10-14 17:23:04,740 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': 'none'}}, {'eq': {'msg': '登录成功'}}]
INFO - 2025-10-14 17:23:04,740 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【None】,实际结果【[None]】
INFO - 2025-10-14 17:23:04,741 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg': '登录成功'}，等于预期结果：{'msg': '登录成功'}
INFO - 2025-10-14 17:23:04,741 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,741 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,749 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-10-14 17:23:04,750 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-10-14 17:23:04,750 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-10-14 17:23:04,750 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-10-14 17:23:04,750 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'DC7aeac9acAc54c9Ec0BEa24aF4a6'}
INFO - 2025-10-14 17:23:04,750 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,750 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-10-14 17:23:04,752 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-10-14 17:22:17",
  "secache_time": 1760433737000,
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:23:04,753 - apiutil_business.py:198 -[apiutil_business:extract_data_list] - json提取到参数：{'goodsIds': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-10-14 17:23:04,754 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-10-14 17:23:04,754 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-10-14 17:23:04,754 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,755 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,756 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,764 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-10-14 17:23:04,764 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-10-14 17:23:04,764 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:23:04,764 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-10-14 17:23:04,764 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,764 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,764 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819', 'page': 1, 'size': 20}}
INFO - 2025-10-14 17:23:04,768 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "api_type": "pinduoduo",
  "cache": 0,
  "call_args": {
    "num_iid": "1620002566"
  },
  "client_ip": "106.6.39.223",
  "error": "",
  "error_code": "0000",
  "execution_time": "0.437",
  "goodsId": "74190550836",
  "item": {
    "AmountOnSale": 3188,
    "CategoryId": 8484,
    "Coupon": null,
    "Delivery": {
      "From": null,
      "Info": null,
      "MarkInfo": null,
      "Postage": "\u5feb\u9012 \u514d\u8fd0\u8d39",
      "To": null,
      "extras": null
    },
    "DescUrl": null,
    "Detail": "<img src=\"https://img.pddpic.com/mms-material-img/2022-09-18/3f89d470-1af8-4dee-b529-6d62aa2ea3b7.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-02-15/ddf6fe7b-b536-4183-932d-69a1189a3f59.png\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/20f659b04d3e7e5851c27ff9931c96fc.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2019-11-14/4420a8c3-49ed-46d8-ab55-15e7a638ca31.jpg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/26c3e9d5cfbaf4e8f13b2bdd38f48d71.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/0aa872fa74599dad7b6aefe6b6c035c0.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6bc959e32a30424c7a5284a37676999c.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/1fa9861a8c99c5e9e8119fd2239fef5a.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/b62cabf1d2320c5761e3f4c15203fb20.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/6f6e54376a66cbc78e16700d4c424fe1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/2f60753dfc875a6876adc35833a69d31.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/ae0116e589d8de712f8dafd0c356cefe.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/da910c98fcc8de1b4d2d1498cd7899fd.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/140349649d8b7d08c8e88bfbbaa2f900.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/a953bae2eeb7364ef3ef2976a97d07eb.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4da59828136c3b1308aad0aa990778a7.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-09-02/4a365b61a80e47288c8609ccd5982396.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/cd0a8a96b783a51236812ce24c59a329.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/16008ac19768d05e7dee16406ff958a1.jpeg\" style=\"width:100%;\"/><img src=\"https://t00img.yangkeduo.com/goods/images/2018-11-17/ef1d17b69ebf9449a8bb52459b168c26.jpeg\" style=\"width:100%;\"/>",
    "FansCount": null,
    "ImageUrls": [
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/d209ef7bcc9183c3bb8ca1dfdb108d49.jpeg",
      "https://omsproductionimg.yangkeduo.com/images/2017-12-12/74257ab65f3f00da7a90fde9042fe640.jpeg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/e8fbd9cb-cc74-4caa-9380-84c46d27b008.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/d76f515b-e375-4060-b94e-cf64f6b0964e.jpg",
      "https://t00img.yangkeduo.com/goods/images/2019-08-17/f2f279b5-6000-4fbe-b99b-7c1cbd7884ea.jpg"
    ],
    "MainImageVideo": null,
    "OfferId": 1620002566,
    "OriginalPriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 115,
        "Range": "3"
      }
    ],
    "PriceRangeInfos": [
      {
        "ConvertPrice": 0,
        "Price": 95.4,
        "Range": "3"
      }
    ],
    "ProductFeatureTuples": [
      {
        "Item1": "\u9762\u6599\u6750\u8d28",
        "Item2": "\u4eff\u76ae\u8349"
      },
      {
        "Item1": "\u6210\u5206\u542b\u91cf",
        "Item2": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09"
      },
      {
        "Item1": "\u7248\u578b",
        "Item2": "\u4fee\u8eab"
      },
      {
        "Item1": "\u9886\u578b",
        "Item2": "\u5706\u9886"
      },
      {
        "Item1": "\u8863\u957f",
        "Item2": "\u77ed\u6b3e"
      },
      {
        "Item1": "\u662f\u5426\u5e26\u6bdb\u9886",
        "Item2": "\u4e0d\u5e26\u6bdb\u9886"
      },
      {
        "Item1": "\u4e3b\u98ce\u683c",
        "Item2": "\u6c14\u8d28\u540d\u5a9b"
      }
    ],
    "ProductFeatures": {
      "\u4e3b\u98ce\u683c": "\u6c14\u8d28\u540d\u5a9b",
      "\u6210\u5206\u542b\u91cf": "71%\uff08\u542b\uff09\u201480%\uff08\u542b\uff09",
      "\u662f\u5426\u5e26\u6bdb\u9886": "\u4e0d\u5e26\u6bdb\u9886",
      "\u7248\u578b": "\u4fee\u8eab",
      "\u8863\u957f": "\u77ed\u6b3e",
      "\u9762\u6599\u6750\u8d28": "\u4eff\u76ae\u8349",
      "\u9886\u578b": "\u5706\u9886"
    },
    "RateCount": null,
    "RetryCount": 0,
    "SellCount": "\u5df2\u62fc4.2\u4e07\u4ef6",
    "SellerId": null,
    "SellerNick": null,
    "ShopId": "461742",
    "ShopInfo": null,
    "ShopName": "\u679c\u679c\u5bb6\u6c14\u8d28\u5973\u88c5",
    "ShopUrl": "http://yangkeduo.com/mall_page.html?mall_id=461742",
    "SkuMaps": [
      {
        "AmountOnSale": 73,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357891",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 65,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357892",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 82,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357893",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357894",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 94,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357895",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 105,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
        "Key": "1215:1115500378;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357896",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)"
        }
      },
      {
        "AmountOnSale": 1051,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357897",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 88,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357898",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 80,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357899",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 660,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357900",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 126,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357901",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 89,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
        "Key": "1215:1115501666;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "57114357902",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 98,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
        "Key": "1215:105309781;1226:119128",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107855",
        "SpecAttributes": {
          "\u5c3a\u7801": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 95,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/3660b7893ca5cda1ffcea745d10b2506.jpeg",
        "Key": "1215:105309781;1226:96784",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107856",
        "SpecAttributes": {
          "\u5c3a\u7801": "M\uff0890-100\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/a4a5a671afbb2d8e1f4c21c0ced3bea8.jpeg",
        "Key": "1215:105309781;1226:33651",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107857",
        "SpecAttributes": {
          "\u5c3a\u7801": "L\uff08100-110\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 97,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/f0551176629bf81f25757c160198dba1.jpeg",
        "Key": "1215:105309781;1226:33652",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107858",
        "SpecAttributes": {
          "\u5c3a\u7801": "XL\uff08110-120\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 99,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/801a2e23140bfe76229f02aab0a8a5fe.jpeg",
        "Key": "1215:105309781;1226:33653",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107853",
        "SpecAttributes": {
          "\u5c3a\u7801": "2XL\uff08120-130\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      },
      {
        "AmountOnSale": 100,
        "ImageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/2f202934f16f0eee41257b77bf489262.jpeg",
        "Key": "1215:105309781;1226:33656",
        "OriginalPrice": 115,
        "Price": 95.4,
        "SkuId": "103851107854",
        "SpecAttributes": {
          "\u5c3a\u7801": "3XL\uff08130-140\u65a4\uff09",
          "\u989c\u8272": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09"
        }
      }
    ],
    "SkuProps": [
      {
        "IsImg": true,
        "Prop": "\u989c\u8272",
        "Value": [
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/062d42b525a7c786920cbb83ac772af7.jpeg",
            "name": "\u7c89\u8272\u4e24\u4ef6\u5957(\u5916\u5957+\u88d9\u5b50)",
            "value": "1215:1115500378"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-08-28/415bed99d5a925123d7b7c39547205de.jpeg",
            "name": "\u7c73\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:1115501666"
          },
          {
            "imageUrl": "http://t00img.yangkeduo.com/goods/images/2018-11-17/48b30664f0f7e526ab1b956e813f25cf.jpeg",
            "name": "\u84dd\u8272\u4e24\u4ef6\u5957\uff08\u5916\u5957+\u88d9\u5b50\uff09",
            "value": "1215:105309781"
          }
        ]
      },
      {
        "IsImg": false,
        "Prop": "\u5c3a\u7801",
        "Value": [
          {
            "name": "S\uff0890\u65a4\u4ee5\u4e0b\uff09",
            "value": "1226:119128"
          },
          {
            "name": "M\uff0890-100\u65a4\uff09",
            "value": "1226:96784"
          },
          {
            "name": "L\uff08100-110\u65a4\uff09",
            "value": "1226:33651"
          },
          {
            "name": "XL\uff08110-120\u65a4\uff09",
            "value": "1226:33652"
          },
          {
            "name": "2XL\uff08120-130\u65a4\uff09",
            "value": "1226:33653"
          },
          {
            "name": "3XL\uff08130-140\u65a4\uff09",
            "value": "1226:33656"
          }
        ]
      }
    ],
    "SourceType": 6,
    "Subject": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
    "Tag": null,
    "Unit": null,
    "UserId": "461742",
    "_ddf": "app",
    "format_check": "ok"
  },
  "reason": "",
  "request_id": "gw-4.63510267214bd",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-10-14 17:23:04",
  "secache_time": 1666253415,
  "server_memory": "0.84MB",
  "server_time": "Beijing/2023-10-20 16:10:15",
  "translate_engine": "baidu",
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:23:04,769 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'error_code': '0000'}}]
INFO - 2025-10-14 17:23:04,769 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-10-14 17:23:04,769 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,770 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,771 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,778 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-10-14 17:23:04,778 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-10-14 17:23:04,778 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:23:04,778 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：详情页面选择规格，提交订单
INFO - 2025-10-14 17:23:04,778 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,779 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,779 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '18382788819', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': 127839112, 'price': '128', 'freight_insurance': '0.00', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-10-14 17:23:04,782 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-10-14 17:23:04",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "791671461149354452677",
  "translate_language": "zh-CN",
  "userId": "2696980775605809234"
}

INFO - 2025-10-14 17:23:04,782 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'orderNumber': '791671461149354452677'}
INFO - 2025-10-14 17:23:04,783 - apiutil_business.py:171 -[apiutil_business:extract_data] - json提取到参数：{'userId': '2696980775605809234'}
INFO - 2025-10-14 17:23:04,785 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}]
INFO - 2025-10-14 17:23:04,785 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-10-14 17:23:04,785 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,785 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,786 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,802 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-10-14 17:23:04,802 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-10-14 17:23:04,802 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:23:04,802 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-10-14 17:23:04,802 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,803 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,803 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '791671461149354452677', 'userId': '2696980775605809234', 'timeStamp': '1760433784'}}
INFO - 2025-10-14 17:23:04,806 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-10-14 17:23:04",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:23:04,806 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '订单支付成功'}}]
INFO - 2025-10-14 17:23:04,806 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '订单支付成功'}，等于预期结果：{'message': '订单支付成功'}
INFO - 2025-10-14 17:23:04,806 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,807 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,808 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,818 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：校验订单状态
INFO - 2025-10-14 17:23:04,818 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/checkOrderStatus
INFO - 2025-10-14 17:23:04,818 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:23:04,818 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：校验商品订单状态
INFO - 2025-10-14 17:23:04,818 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,819 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,819 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '791671461149354452677', 'timeStamp': '1760433784'}}
INFO - 2025-10-14 17:23:04,822 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "",
  "error_code": "",
  "queryTime": "2025-10-14 17:23:04",
  "status": "0",
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:23:04,822 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'status': '0'}}]
INFO - 2025-10-14 17:23:04,822 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'status': '0'}，等于预期结果：{'status': '0'}
INFO - 2025-10-14 17:23:04,822 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,823 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,825 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
ERROR - 2025-10-14 17:23:04,833 - readyaml.py:112 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
ERROR - 2025-10-14 17:23:04,834 - readyaml.py:112 -[readyaml:get_extract_yaml] - 【extract.yaml】没有找到：cookie,--'cookie'
INFO - 2025-10-14 17:23:04,835 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品列表
INFO - 2025-10-14 17:23:04,835 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/goodsList
INFO - 2025-10-14 17:23:04,835 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：Get
INFO - 2025-10-14 17:23:04,835 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品列表
INFO - 2025-10-14 17:23:04,835 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'None'}
INFO - 2025-10-14 17:23:04,835 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,835 - sendrequest.py:150 -[sendrequest:run_main] - 请求参数：{'params': {'msgType': 'getHandsetListOfCust', 'page': 1, 'size': 20}}
INFO - 2025-10-14 17:23:04,837 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "api_info": "today:21 max:10000 all[90=21+33+36];expires:2030-12-31",
  "cache": 0,
  "error_code": "0000",
  "goodsList": [
    {
      "goodsId": "18382788819",
      "goods_count": "233",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/bcf848aa71c6389607ae7a84b70f1543.jpeg",
      "goods_name": "\u30102\u4ef6\u5957\u3011\u5957\u88c5\u79cb\u51ac\u65b0\u6b3e\u4eff\u736d\u5154\u6bdb\u9489\u73e0\u76ae\u8349\u6bdb\u6bdb\u77ed\u5916\u5957\u52a0\u539a\u5927\u8863\u5973\u88c5",
      "original_price": "",
      "unit_price": "\uffe599.00"
    },
    {
      "goodsId": "33809635011",
      "goods_count": "521",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/176019babfdecffa1d9f98f40b7e99b4.jpeg",
      "goods_name": "\u597d\u5947\u5c0f\u68ee\u6797\u5fc3\u94bb\u88c5\u7eb8\u5c3f\u88e4M22\u62c9\u62c9\u88e4L18/XL14\u8d85\u8584\u900f\u6c14\u88e4\u578b\u5c3f\u4e0d\u6e7f 1\u4ef6\u88c5",
      "original_price": "",
      "unit_price": "\uffe5108.00"
    },
    {
      "goodsId": "56996760797",
      "goods_count": "1181",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u51bb\u5e72\u9e21\u5c0f\u80f8\u6574\u5757\u589e\u80a5\u8425\u517b\u53d1\u816e\u72d7\u72d7\u96f6\u98df\u65b0\u624b\u517b\u732b\u96f6\u98df\u5e7c\u732b\u96f6\u98df100g",
      "original_price": "",
      "unit_price": "\uffe517.80"
    },
    {
      "goodsId": "82193785267",
      "goods_count": "3000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u81ea\u8425\u3011ISB\u4f0a\u73ca\u5a1c\u610f\u5927\u5229\u6c34\u679c\u7cfb\u5217\u5ba0\u7269\u72ac\u732b\u6c90\u6d74\u9732\u9664\u81ed\u9999\u6ce2\u62a4\u6bdb\u7d20",
      "original_price": "",
      "unit_price": "\uffe5650.00"
    },
    {
      "goodsId": "74190550836",
      "goods_count": "1000+",
      "goods_image": "https://omsproductionimg.yangkeduo.com/images/2017-12-12/efb5db42397550bffd3211ca6f197498.jpeg",
      "goods_name": "\u3010\u65b0\u54c1\u96f60CM\u5d4c\u5165\u5f0f\u3011\u6d77\u5c14\u7535\u51b0\u7bb1410L\u5bb6\u7528\u6cd5\u5f0f\u56db\u95e8\u591a\u95e8\u5b98\u65b9\u6b63\u54c1",
      "original_price": "",
      "unit_price": "\uffe55746.00"
    }
  ],
  "reason": "",
  "request_id": "request_id",
  "secache": "c98b29872e8a4b28859db207944ba817",
  "secache_date": "2025-10-14 17:22:17",
  "secache_time": 1760433737000,
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:23:04,837 - apiutil.py:183 -[apiutil:extract_data_list] - json提取到参数：{'goodsId': ['18382788819', '33809635011', '56996760797', '82193785267', '74190550836']}
INFO - 2025-10-14 17:23:04,839 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '0000'}}]
INFO - 2025-10-14 17:23:04,839 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-10-14 17:23:04,840 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,840 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,841 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,850 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：商品详情
INFO - 2025-10-14 17:23:04,851 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/productDetail
INFO - 2025-10-14 17:23:04,851 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:23:04,851 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：获取商品详情
INFO - 2025-10-14 17:23:04,851 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,851 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,851 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'pro_id': '18382788819,33809635011,56996760797,82193785267,74190550836', 'page': 1, 'size': 20}}
INFO - 2025-10-14 17:23:04,854 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error": "\u4e0d\u5b58\u5728\u8be5\u5546\u54c1",
  "error_code": "4000",
  "goodsId": "",
  "item": {},
  "secache_date": "2025-10-14 17:23:04",
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:23:04,855 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'error_code': '4000'}}]
INFO - 2025-10-14 17:23:04,855 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【4000】,实际结果【4000】
INFO - 2025-10-14 17:23:04,855 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,855 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,856 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,884 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：提交订单
INFO - 2025-10-14 17:23:04,884 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/placeAnOrder
INFO - 2025-10-14 17:23:04,885 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:23:04,885 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：提交订单
INFO - 2025-10-14 17:23:04,885 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,885 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,885 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'goods_id': '33809635011', 'number': 2, 'propertyChildIds': '2:9', 'inviter_id': '127839112', 'price': '128', 'freight_insurance': '0.0', 'discount_code': '002399', 'consignee_info': {'name': '张三', 'phone': 13800000000, 'address': '北京市海淀区西三环北路74号院4栋3单元1008'}}}
INFO - 2025-10-14 17:23:04,888 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "crateTime": "2025-10-14 17:23:04",
  "error": "",
  "error_code": "0000",
  "message": "\u63d0\u4ea4\u8ba2\u5355\u6210\u529f",
  "orderNumber": "485316139759441330484",
  "translate_language": "zh-CN",
  "userId": "2696980775605809234"
}

INFO - 2025-10-14 17:23:04,889 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-10-14 17:23:04,890 - apiutil.py:154 -[apiutil:extract_data] - 提取接口的返回值：
INFO - 2025-10-14 17:23:04,891 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'eq': {'message': '提交订单成功'}}, {'eq': {'error_code': '0000'}}]
INFO - 2025-10-14 17:23:04,891 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'message': '提交订单成功'}，等于预期结果：{'message': '提交订单成功'}
INFO - 2025-10-14 17:23:04,891 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'error_code': '0000'}，等于预期结果：{'error_code': '0000'}
INFO - 2025-10-14 17:23:04,891 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,892 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,893 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,907 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：订单支付
INFO - 2025-10-14 17:23:04,907 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/coupApply/cms/orderPay
INFO - 2025-10-14 17:23:04,907 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：post
INFO - 2025-10-14 17:23:04,907 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：订单支付
INFO - 2025-10-14 17:23:04,908 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/json;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,908 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,908 - sendrequest.py:147 -[sendrequest:run_main] - 请求参数：{'json': {'orderNumber': '485316139759441330484', 'userId': '2696980775605809234', 'timeStamp': '1760433784'}}
INFO - 2025-10-14 17:23:04,911 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "createTime": "2025-10-14 17:23:04",
  "error": "",
  "error_code": "0000",
  "message": "\u8ba2\u5355\u652f\u4ed8\u6210\u529f",
  "translate_language": "zh-CN"
}

INFO - 2025-10-14 17:23:04,911 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'message': '订单支付成功'}}, {'contains': {'error_code': '0000'}}]
INFO - 2025-10-14 17:23:04,911 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【订单支付成功】,实际结果【订单支付成功】
INFO - 2025-10-14 17:23:04,911 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【0000】,实际结果【0000】
INFO - 2025-10-14 17:23:04,912 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,912 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,913 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,926 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-10-14 17:23:04,926 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-10-14 17:23:04,926 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:23:04,926 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常新增用户
INFO - 2025-10-14 17:23:04,927 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,927 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,927 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': 'DC7aeac9acAc54c9Ec0BEa24aF4a6'}}
INFO - 2025-10-14 17:23:04,930 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u65b0\u589e\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-10-14 17:23:04,930 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增成功'}}]
INFO - 2025-10-14 17:23:04,930 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增成功】,实际结果【新增成功】
INFO - 2025-10-14 17:23:04,930 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,931 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,932 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,936 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-10-14 17:23:04,936 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-10-14 17:23:04,936 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:23:04,937 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少token
INFO - 2025-10-14 17:23:04,937 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,937 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,937 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-10-14 17:23:04,938 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-10-14 17:23:04,939 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-10-14 17:23:04,939 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-10-14 17:23:04,939 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,939 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,940 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,945 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-10-14 17:23:04,945 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-10-14 17:23:04,945 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:23:04,945 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数username
INFO - 2025-10-14 17:23:04,945 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,945 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,945 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-10-14 17:23:04,948 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-10-14 17:23:04,948 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-10-14 17:23:04,948 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-10-14 17:23:04,948 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,949 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,950 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,954 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：新增用户
INFO - 2025-10-14 17:23:04,954 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/addUser
INFO - 2025-10-14 17:23:04,954 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:23:04,954 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效新增·缺少必填参数role_id
INFO - 2025-10-14 17:23:04,955 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,955 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,955 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789890', 'dates': '2023-12-31', 'phone': 13800000000, 'token': None}}
INFO - 2025-10-14 17:23:04,956 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u65b0\u589e\u5931\u8d25",
  "msg_code": 9001
}

INFO - 2025-10-14 17:23:04,957 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '新增失败'}}]
INFO - 2025-10-14 17:23:04,957 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【新增失败】,实际结果【新增失败】
INFO - 2025-10-14 17:23:04,957 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,957 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,958 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,963 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：修改用户
INFO - 2025-10-14 17:23:04,963 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/updateUser
INFO - 2025-10-14 17:23:04,963 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:23:04,963 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：正常修改用户信息
INFO - 2025-10-14 17:23:04,963 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,964 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,964 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'username': 'testadduser', 'password': 'tset6789#$123', 'role_id': 89588181111112343, 'dates': '2023-12-31', 'phone': 13800000000}}
INFO - 2025-10-14 17:23:04,965 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u66f4\u65b0\u6210\u529f",
  "msg_code": 200
}

INFO - 2025-10-14 17:23:04,965 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'status_code': 200}}, {'contains': {'msg': '更新成功'}}]
INFO - 2025-10-14 17:23:04,966 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【更新成功】,实际结果【更新成功】
INFO - 2025-10-14 17:23:04,966 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,966 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,967 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,971 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-10-14 17:23:04,971 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-10-14 17:23:04,971 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:23:04,972 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效删除用户
INFO - 2025-10-14 17:23:04,972 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,972 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,972 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-10-14 17:23:04,974 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u5220\u9664\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-10-14 17:23:04,974 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除成功'}}]
INFO - 2025-10-14 17:23:04,974 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除成功】,实际结果【删除成功!】
INFO - 2025-10-14 17:23:04,974 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,975 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,976 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,981 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-10-14 17:23:04,981 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-10-14 17:23:04,982 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:23:04,982 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid不存在
INFO - 2025-10-14 17:23:04,982 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,982 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,982 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-10-14 17:23:04,984 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-10-14 17:23:04,984 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-10-14 17:23:04,984 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-10-14 17:23:04,984 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,985 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,986 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:04,991 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-10-14 17:23:04,991 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-10-14 17:23:04,991 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:23:04,991 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·userid为空
INFO - 2025-10-14 17:23:04,991 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:04,992 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:04,992 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 1238393873922}}
INFO - 2025-10-14 17:23:04,993 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-10-14 17:23:04,994 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-10-14 17:23:04,994 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-10-14 17:23:04,994 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:04,995 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:04,996 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:05,000 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：删除用户
INFO - 2025-10-14 17:23:05,001 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/deleteUser
INFO - 2025-10-14 17:23:05,001 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:23:05,001 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：无效删除用户·缺少必填参数
INFO - 2025-10-14 17:23:05,001 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:05,001 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:05,003 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "msg": "\u5220\u9664\u5931\u8d25\uff0c\u7528\u6237id\u4e0d\u5b58\u5728!",
  "msg_code": 9001
}

INFO - 2025-10-14 17:23:05,003 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '删除失败'}}]
INFO - 2025-10-14 17:23:05,003 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【删除失败】,实际结果【删除失败，用户id不存在!】
INFO - 2025-10-14 17:23:05,003 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:05,004 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
INFO - 2025-10-14 17:23:05,005 - conftest.py:20 -[conftest:start_test_and_end] - -------------接口测试开始--------------
INFO - 2025-10-14 17:23:05,010 - sendrequest.py:135 -[sendrequest:run_main] - 接口名称：用户查询
INFO - 2025-10-14 17:23:05,010 - sendrequest.py:136 -[sendrequest:run_main] - 请求地址：http://127.0.0.1:8787/dar/user/queryUser
INFO - 2025-10-14 17:23:05,010 - sendrequest.py:137 -[sendrequest:run_main] - 请求方式：POST
INFO - 2025-10-14 17:23:05,010 - sendrequest.py:138 -[sendrequest:run_main] - 测试用例名称：有效查询用户
INFO - 2025-10-14 17:23:05,010 - sendrequest.py:139 -[sendrequest:run_main] - 请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
INFO - 2025-10-14 17:23:05,010 - sendrequest.py:140 -[sendrequest:run_main] - Cookie：None
INFO - 2025-10-14 17:23:05,010 - sendrequest.py:144 -[sendrequest:run_main] - 请求参数：{'data': {'user_id': 123839387391912}}
INFO - 2025-10-14 17:23:05,013 - sendrequest.py:108 -[sendrequest:send_request] - 接口返回信息：{
  "error_code": null,
  "msg": "\u67e5\u8be2\u6210\u529f!",
  "msg_code": 200
}

INFO - 2025-10-14 17:23:05,013 - assertions.py:170 -[assertions:assert_result] - yaml文件预期结果：[{'contains': {'msg': '查询成功'}}, {'eq': {'msg_code': 200}}]
INFO - 2025-10-14 17:23:05,013 - assertions.py:45 -[assertions:contains_assert] - 字符串包含断言成功：预期结果【查询成功】,实际结果【查询成功!】
INFO - 2025-10-14 17:23:05,013 - assertions.py:68 -[assertions:equal_assert] - 相等断言成功：接口实际结果：{'msg_code': 200}，等于预期结果：{'msg_code': 200}
INFO - 2025-10-14 17:23:05,014 - assertions.py:198 -[assertions:assert_result] - 测试成功
INFO - 2025-10-14 17:23:05,014 - conftest.py:22 -[conftest:start_test_and_end] - -------------接口测试结束--------------
